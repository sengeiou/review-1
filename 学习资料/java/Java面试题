Java 基础
1、transient关键字的作用
在对象序列化的时候，有些变量不需要序列化，比如密码等，transient修饰的变量不会被序列化。
public class User implements Serializable{
    public String username;
    //密码不序列化
    public transient  String passowrd;
}

JDK 1.7特性？
1)try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。
比如：
        try (BufferedReader br = new BufferedReader(new FileReader("D://obj.txt"))) {
            String line = br.readLine();
        }
这种在try后面加个括号，再初始化对象的语法就叫try-with-resources。
操作的类只要是实现了AutoCloseable接口就可以在try语句块退出的时候自动调用close方法关闭流资源。
上面代码效果相当于下面的代码：

        BufferedReader br = new BufferedReader(new FileReader("D://obj.txt"));
        Throwable var1 = null;
        try {
            String line = br.readLine();
        } catch (Throwable var11) {
            var1 = var11;
            throw var11;
        } finally {
            if (br != null) {
                if (var1 != null) {
                    try {
                        br.close();
                    } catch (Throwable var10) {
                        var1.addSuppressed(var10);
                    }
                } else {
                    br.close();
                }
            }
        }

2)Fork-Join 池某种程度上实现 Java 版的 Map-reduce。
故名思义，拆分fork+合并join
思想:充分利用多核CPU把计算拆分成多个子任务，并行计算，提高CPU利用率大大减少运算时间。
3)允许 Switch 中有 String 变量和文本。
        String str = "a";
        switch (str) {
            case "a":
                break;
            default:
                break;
        }
4)菱形操作符(\<>)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码
比如 List<String> list=new ArrayList<>();

JDK 1.8特性？
java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：
1、Lambda 表达式，允许像对象一样传递匿名函数
2、Stream API，充分利用现代多核 CPU，可以写出很简洁的代码
3、Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用
4、接口中可以有静态、默认方法。
public interface MyInterface {

   public static void fun(){
    System.out.println("静态方法");
   }
   public default  void fun2(){
      System.out.println("在返回值前+default，然后其子类的实现类中进行调用，子类中也可以重写");
   }

}
public class MyInterfaceImpl implements  MyInterface {
    @Override
    public void fun2() {
     //重写
    }
}

5、重复注解：现在你可以将相同的注解在同一类型上使用多次。
@Repeatable注解表明标记的注解可以多次应用于相同的声明或类型

//定义注解
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(RepeatAnnotations.class) //注解容器
public @interface RepeatAnnotation {
    String value() default  "";
}

//注解容器
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface RepeatAnnotations {
    RepeatAnnotation[] value();
}

//使用重复注解
@RepeatAnnotation("aa")
@RepeatAnnotation("bbb")
public class RepeatAnnotationImpl {

    public static void main(String[] args) {
        boolean annotationPresent = RepeatAnnotationImpl.class.isAnnotationPresent(RepeatAnnotations.class);
        if(annotationPresent){
           //通过注解容器获取注解
            RepeatAnnotations annotations = RepeatAnnotationImpl.class.getAnnotation(RepeatAnnotations.class);
            RepeatAnnotation[] values = annotations.value();
            for(RepeatAnnotation annotation:values){
                System.out.println(annotation);
            }

            /**输出
             * @com.terry.java_demo.jdk8.RepeatAnnotation(value=aa)
             * @com.terry.java_demo.jdk8.RepeatAnnotation(value=bbb)
             */
        }
    }
}



-------------------------------------面试题
面向对象的三大特征？
封装、继承、多态
多态的好处？
可替换性、可扩充性、接口性、灵活性、简化性
代码中如何实现多态？
实现多态主要有以下三种方式：
1）接口实现
2）继承父类，重写方法
3）同一类中进行方法的重载

switch可比较的数据类型?
byte、short、int、char，以及它们包装类型.
枚举
从JDK1.7开始支持 String。

什么是不可变对象?
不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。

java 创建对象的几种方式?
采用new
通过反射
采用clone
通过序列化机制

Object中有哪些公共方法?
equals()
clone()
getClass()
hashCode()
notify(),notifyAll(),wait()

a=a+b与a+=b有什么区别吗?
byte a = 127;
byte b = 127;
b = a + b; // 编译错误，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错
b += a; // ok，+=运算符是java支持的，会自动进行转换

同步与异步？
同步/异步, 它们是消息的通知机制。
所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回，也就是返回时一定是有结果的。
异步是发送请求后就返回了，返回时还没有结果，等有结果了通知调用者

阻塞和非阻塞？
阻塞/非阻塞, 它们是程序在等待消息(无所谓同步或者异步)时的状态.
阻塞调用是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。
非阻塞指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。

深拷贝和浅拷贝的区别？
浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。

换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。

深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。
换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。

64位的JVM当中,int的长度是多少?
Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。
意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。

你知道哪些垃圾回收算法?
垃圾回收从理论上非常容易理解,具体的方法有以下几种:
更详细的内容参见 http://blog.csdn.net/dd864140130/article/details/50084471
1. 标记-清除
算法分为两个过程：
1)、标记正所有需要回收的对象 2)、标记完成后清除被标记的对象。其标记的过程就是判断对象有效性，执行可达性分析的过程.
缺点：
1、每次进行垃圾回收时，会暂停当前用户程序的运行（类似让所有的同学站起来）
2、垃圾回收器需要间隔性的检查，并且标记和清除的过程相对较慢。
3、在标记清除之后可能会产生大量内存碎片，导致一旦需要为大对象分配空间时，由于找不到足够大的内存空间，而不得以引发另外一次GC过程。

2. 复制法
它将可用内存划分为两个等量的区域（使用区和空闲区），每次只使用一块。
当正在使用的区域需要进行垃圾回收时，存活的对象将被复制到另外一块区域。原先被使用的区域被重置，转为空闲区。
缺点：
1、原有可用空间被缩小为1/2，空间利用率降低了。
2、过程中也会暂停当前应用的运行。

3. 标记-整理
复制算法在对象存活率较高的情况下就要进行较多的复制操作，更重要的是该算法浪费一半的内存空间，
为了解决该问题，出现了标记—整理算法：其标记的过程和“标记-清除”算法一样，而整理的过程则是让所有存活的对象都向另外一端移动，然后直接清理掉端边界以外的内存。
(也就是让存活的对象都聚在一起，把边界不使用的内存回收掉)
缺点：
1、暂停当前应用的运行，非实时性的回收。

4. 分代回收
对象的生存周期总体可分为三种：新生代、老年代和永久代。因此可以根据各个年代的特点采用适当的垃圾回收算法。
新生代由于大部分对象的生存时间都较短，可以采用复制法，老年代和永久代可采用标记整理法。

5.增量收集算法
以上所述的算法，都存在一个缺点：在进行垃圾回收时需要暂停当前应用的执行，也就是这时候的垃圾回收线程不能和应用线程同时运行。

如何判断一个对象是否应该被回收？
这就是所谓的对象存活性判断,常用的方法有两种:
1）引用计数法;
2）对象可达性分析.由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法.

简单的解释一下垃圾回收？
Java 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。
一般的实现是划分成3个世代：年轻、年老和永久。
内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。
对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。
一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性.

调用System.gc()会发生什么?
通知GC开始工作,但是GC真正开始的时间不确定.




1. 接口的意义(百度)
规范、便于扩展、回调
特别说明：
从JDK1.8开始，接口中允许定义方法的实现(静态方法)
2. 抽象类的意义(乐视)
1）为其子类提供一个公共的类型
2）封装子类中重复定义的内容
3）定义抽象方法

3. 内部类的作用(百度,乐视)

4. 父类的静态方法能否被子类重写,为什么?(猎豹)
不能
子类继承父类后，拥有相同的静态方法和非静态方法。注意：抽象类中也可以定义静态方法

接口中可以有方法的实现么？
从JDK1.8开始，接口方法中允许有方法的实现(静态方法)

5. 举 1-2 个排序算法,并使用 java 代码实现(美团)
http://blog.csdn.net/qy1387/article/details/7752973
6. 列举 java 的集合和继承关系(百度、美团)
Collection
    --List
         --LinkedList
         --ArrayList
         --Vector
             --Stack
    --Set
         --HashSet
 Map
    --HashTable
    --HashMap
         --LinkedHashMap
    --TreeMap



LinkedHashMap和PriorityQueue的区别？
LinkedHashMap 维持的是元素插入的顺序。
PriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，与插入顺序无关.要求元素实现Comparable或者传入Comparator

WeakHashMap与HashMap的区别是什么?
WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。

如何实现集合排序?
1、可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。
2、对于Map， 可以使用TreeMap
3、对于Set， 可以使用TreeSet

如何打印数组内容？
你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容

遍历ArrayList时如何正确移除一个元素？
应该使用 Iterator<E> iterator=list.iterator()
         while(iterator.hasNext()){
            E e=iteraotr.next();
         }

SimpleDateFormat是线程安全的吗?
DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的。建议将 SimpleDateFormat 限制在 ThreadLocal 中

7. java 虚拟机的特性(百度、乐视)
Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。
一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。
而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，
Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。

8. 哪些情况下的对象会被垃圾回收机制处理掉(乐视、美团、小米)
1）不再被引用的对象 2）内存不足的情况下下，那些使用软引用、弱引用的对象。

9. 进程和线程的区别(猎豹)
进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.
进程在执行过程中拥有独立的内存单元,而多个线程共享内存资源,减少切换次数,从而效率更高.

线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行.

守护线程与非守护线程？
在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程)
任何一个守护线程都是整个JVM中所有非守护线程的保姆
只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。
守护线程最典型的应用就是 GC (垃圾回收器)
将一个线程设置为守护线程：
Thread daemonTread = new Thread();
 daemonThread.setDaemon(true);   // 必须在start之前设置
1）thread.setDaemon(true)必须在thread.start()之前设置
2）在Daemon线程中产生的新线程也是Daemon的。

什么是多线程上下文切换？
多线程的上下文切换是指CPU控制权由一个正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。

Runnable和Callable的区别？
Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；
Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。


wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别？
wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余的同步代码执行完毕才会放弃对象监视器。
final Object lock =new Object();
    public void funA(){
        synchronized (lock){
            System.out.println("FunA");
            try {
                lock.wait(); //等待
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("FunA  end");
        }

    }
    public void funB(){
        synchronized (lock){
            System.out.println("FunB");
            try {
                Thread.sleep(2*1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("FunB    notify");
            lock.notify(); //虽然调用了notify，但必须把同步方法块执行完毕后才能释放同步所

              try {
                    Thread.sleep(2*1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("FunB    end");
        }
    }
 打印如下：
FunA
FunB
FunB    notify
FunB    end    //必须把notify后的同步剩余代码执行完毕后才释放同步锁
FunA  end

wait()与sleep()的区别？
sleep()来自Thread类，wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而调用 wait 方法线程会释放对象锁
sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU
sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用

synchronized和ReentrantLock的区别？
synchronized是关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：
（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁
（2）synchronized会自动释放同步锁，ReentrantLock必须调用unlock释放
（3）ReentrantLock是类，可以灵活调用lock和unlock，实现多路通知。
另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word.

如何在两个线程间共享数据？
通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的

生产消费者模式？
生产者<---->缓冲容器<----->消费者
生产消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。
生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，
所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，
消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。

你有哪些多线程开发良好的实践?
给线程命名
最小化同步范围
优先使用volatile
尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如BlockingQueue,Semeaphore
优先使用并发容器而非同步容器.
考虑使用线程池



11. Java 中==和 equals 的区别,equals 和 hashCode 的区别(乐视)
public class Object {
public native int hashCode();
public boolean equals(Object obj) {
	return (this == obj);
}
}
==和equals的区别：
1）==
 比较的是对象的引用是否为同一个内存地址
2）equals
 equals是Object类中的方法，默认也是比较内存地址，可以被覆写，覆写后一般是通过对象的内容是否相等来判断对象是否相等
3）hashCode
hashCode()是Object类中的方法，返回一个哈希值。如果两个对象根据equals()方法比较相等，那么两个对象的hashCode()方法产生的哈希值也相等。
反之，如果两个对象的哈希值相等，则不能保证两个对象相等。

hashcode常用于基于hash的集合类，比如HashMap、HashSet等，它与equals方法关系特别紧密，根据Java规范，两个使用equals()方法来判断相等
的对象，必须具有相同的hashCode。所以重写equals一般也需要重写hashcode

 @Override
 public V put(K key, V value) {
        if (key == null) {
            return putValueForNullKey(value);
        }

        int hash = Collections.secondaryHash(key);
        HashMapEntry<K, V>[] tab = table;
        int index = hash & (tab.length - 1);
        for (HashMapEntry<K, V> e = tab[index]; e != null; e = e.next) {
            if (e.hash == hash && key.equals(e.key)) { //同时比较hash和equals
                preModify(e);
                V oldValue = e.value;
                e.value = value;
                return oldValue;
            }
        }

        // No entry for (non-null) key is present; create one
        modCount++;
        if (size++ > threshold) {
            tab = doubleCapacity();
            index = hash & (tab.length - 1);
        }
        addNewEntry(key, value, hash, index);
        return null;
    }
ArrayList是比较的equals()。

12. ArrayList 和 HashMap 的实现原理(美团,百度)
13. java 中 int char long 各占多少字节数
byte 位数 8 字节数 1   1byte=8bit;
short 16 2
int 32 4
long 64 8
float 32 4
double 64 8
char 16 2
14. int 与 Integer 的区别
int是基本数据类型
Integer是类类型，是int的包装类，因此具有类的所有特性，比如创建Integer需要new,类中还提供了与其他数据类型之间转换的方法，比如toString，floatValue等
public final class Integer extends Number implements Comparable<Integer> {
  private final int value;
  public Integer(int value) {
      this.value = value;
  }
 public Integer(String s) throws NumberFormatException {
      this.value = parseInt(s, 10);
  }
 public int intValue() {
          return value;
      }
 public float floatValue() {
         return (float)value;
     }
 public String toString() {
         return toString(value);
     }

}

关于Integer的补充说明：
Integer内部有一个IntegerCache类，
private static class IntegerCache {
        static final int low = -128;
        static final int high=127;
        static final Integer cache[]; //[-128 ... 127] 数组中封装了从-128 到127的Integer对象
    }
public static Integer valueOf(int i) {
    //如果-128<=i<=127  则直接从cache数组中获取，因此-128到127的Integer对象都是相等的
    if (i >= IntegerCache.low && i <= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}
根据以上可知，-128到127的Integer对象都是相等的
Integer a=1;
Integer b=1;
a==b  true
Integer c=128;
Integer d=128;
a==b  false

15. String、StringBuffer、 StringBuilder的 区别(小米、乐视、百度)
1、可变与不可变
String类中使用字符数组保存字符串，因为有“final”修饰符，所以可以知道string对象是不可变的
  final char value[];
StringBuffer与StringBuilder也是使用字符数组保存字符串，但是是可变的。
　char[] value;
2、是否多线程安全
String中的对象是不可变的，也就可以理解为常量，显然线程安全。
StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。
StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。
3、StringBuffer与StringBuilder的区别
StringBuffer与StringBuilder的区别就是StringBuffer是线程安全的，StringBuilder是线程非安全的。

3、运行速度
StringBuilder > StringBuffer > String
String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。
对变量进行操作就是直接对该对象进行更改，而不进行创建和回收的操作，所以速度要比String快很多
        String a="str";
        String b="str";
        String c=new String("str");
        String d=new String("str");
        System.out.println("a==b->"+(a==b)); //true
        System.out.println("a==c->"+(a==c)); //false
        System.out.println("c==d->"+(c==d)); //false

16. Java 多态(乐视)
17. 什么导致线程阻塞(58、美团)
http://www.iteye.com/topic/1129528

为了解决对共享存储区的访问冲突，Java 引入了同步机制。
阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），Java 提供了大量方法来支持阻塞
1）sleep(sleeptime) 释放资源，不释放锁
它使得线程在指定的时间内进入阻塞状态，指定的时间一过，线程重新进入可执行状态。
典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止。
2）suspend() 和 resume()   （方法已过时）
两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，
才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：
测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。
3)yield()
yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。
调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程.
4)wait() 和 notify()
wait(long millis)
将当前调用线程挂起，直到另一个线程调用该对象的notify或notifyAll，或者等待指定时间后继续执行。


18. 抽象类、接口区别(360)
1）抽象类是class，具有类的特性，比如具有构造函数，单继承的限制，抽象类可以实现接口
抽象类中可以普通方法、抽象方法。
2）接口是interface，接口可以继承多个接口，但是不能实现接口，接口中的变量都是常量，接口中的方法都是public修饰的
接口没有构造方法，必须由实现类创建。
3）开发中推荐面向接口编程。一是可以隐藏实现，二是避免由于类的单继承带来的限制

19. 容器类之间的区别(乐视、美团)
http://www.cnblogs.com/yuanermen/archive/2009/08/05/1539917.html

数组与链表的比较
1）数组是将元素在内存中连续存放，可以通过下标迅速访问数组中任何元素。而对于数组插入和删除操作，则效率会比较低，
在第一个位置进行插入数据，其余数据就需要依次向后移动，而第一个数据进行删除，则需要所有数据全部向前移。
当数组元素满后，需要创建新的数组，并把原来数组中的元素拷贝到新数组中。
@Override public boolean add(E object) {
    Object[] a = array;
    int s = size;
    if (s == a.length) { //数组装满
         //创建一个新的数组
        Object[] newArray = new Object[s +
                (s < (MIN_CAPACITY_INCREMENT / 2) ?
                 MIN_CAPACITY_INCREMENT : s >> 1)];
        System.arraycopy(a, 0, newArray, 0, s); //元素拷贝到新数组中
        array = a = newArray;
    }
    a[s] = object;
    size = s + 1;
    modCount++;
    return true;
}
特点是：寻址速度快，插入和删除速度慢
2）链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起，上一个元素有个指针指到下一个元素，
因此查找需要遍历，插入和删除，直接改变next引用就可以了。
public class Node{
 public Object data;
 public Node next; //引用下一个元素
}
特点是：寻址速度慢，插入和删除速度快

ArrayList:默认大小是10，当容量满了,size=oldsize+oldsize/2; 最大容量不超过Integer.MAX_VALUE



20. Java 中 HashMap 和 HashTable 的区别(乐视、小米)
    1）、HashTable中的方法使用synchronized同步，是线程安全的，HashMap不是线程安全的。
    在不考虑线程安全的情况下，使用HashMap效率更高
    2）、HashTable的key和value都不能使用null，HashMap允许key或value=null
    3）、HashTable继承Dictionary，实现了map接口，HashMap继承AbstractMap，AbstractMap实现了Map接口
21. ArrayMap VS HashMap
http://lvable.com/?p=217

HashMap:
HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，
如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；
如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；
对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。

我们第一次新建一个HashMap对象的时候，默认的容量是16，若你只打算在HashMap里放入3个元素那将浪费至少13个空间。
Java库里的HashMap其实是一个连续的链表数组，通过让key计算hash值后插入对应的index里。当hash值发生碰撞时，可以采用线性探测，二次hash，或者后面直接变成链表的结构来避免碰撞。因为hash的值不是连续的，所以hashmap实际需要占用的大小会比它实际能装的item的容量要大。
LoadFactor:
加载因子是表示Hsah表中元素的填满的程度.
加载因子越大,填满的元素越多,好处是,空间利用率高了,但冲突的机会加大了.
反之,加载因子越小,填满的元素越少,好处是冲突的机会减小了,但空间浪费多了.
冲突的机会越大,则查找的成本越高.反之,查找的成本越小.因而,查找时间就越小.
因此,必须在 "冲突的机会"与"空间利用率"之间寻找一种平衡与折衷,默认为0.75
如果数组长度=16，因此可以得出HashMap的默认容量是：0.75*16=12。

HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。
HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。
HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。

>>1 表示除以2  <<1表示乘以2
比如 int index=2   index<<1 =2*2=4   index>>1 =2/2=1

public abstract class AbstractMap<K, V> implements Map<K, V>
public class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {
@Override public V put(K key, V value) {
        if (key == null) { //允许key=null，则只有一个key=null
            return putValueForNullKey(value);
        }

        int hash = Collections.secondaryHash(key); //二次hash，将key.hashCode()再次进行hash算法
        HashMapEntry<K, V>[] tab = table;
        int index = hash & (tab.length - 1); //找到该hash在table中的index
        for (HashMapEntry<K, V> e = tab[index]; e != null; e = e.next) {//开始循环查找链表
            if (e.hash == hash && key.equals(e.key)) { //hash值和key都相同的话
                preModify(e);
                V oldValue = e.value; //得到old value值
                e.value = value; //替换为value值
                return oldValue;
            }
        }

        // 如果不存在  则保存
        modCount++;
        if (size++ > threshold) {
            tab = doubleCapacity(); //数组长度双倍增长，但是threshold=0.75*数组长度，也就是达到总长度的0.75时，又需要双倍增长了。
            index = hash & (tab.length - 1);
        }

        //创建一个HashMapEntry，替换当前index元素，并将之前的元素table[index]，用next引用
        table[index] = new HashMapEntry<K, V>(key, value, hash, table[index]);
        return null;
    }

ArrayMap:
public final class ArrayMap<K, V> implements Map<K, V> {
    int[] mHashes; //该数组保存的是key的hash值
    Object[] mArray; //该数组保存的是连续的key,value
    int mSize;

    int indexOf(Object key, int hash) {
           final int N = mSize;

           // 空数组
           if (N == 0) {
               return ~0;
           }

           //二分法查找hash在数组中的index
           int index = ContainerHelpers.binarySearch(mHashes, N, hash);

           //未保存过该key
           if (index < 0) {
               return index;
           }

           // 如果该index查找的key是正确的，则返回，否则继续查找（因为hash值相等，key可能不相等）
           if (key.equals(mArray[index<<1])) {
               return index;
           }

           // 从index向后查找
           int end;
           for (end = index + 1; end < N && mHashes[end] == hash; end++) {
               if (key.equals(mArray[end << 1])) return end;
           }

           // 从index向前查找
           for (int i = index - 1; i >= 0 && mHashes[i] == hash; i--) {
               if (key.equals(mArray[i << 1])) return i;
           }

           // Key not found -- return negative value indicating where a
           // new entry for this key should go.  We use the end of the
           // hash chain to reduce the number of array entries that will
           // need to be copied when inserting.
           return ~end;
       }
         /**
          * 添加数据
          */
         public V put(K key, V value) {
               final int hash;
               int index;
               if (key == null) { //key=null
                   hash = 0;
                   index = indexOfNull();
               } else {    //查找该key hash值的index
                   hash = key.hashCode();
                   index = indexOf(key, hash);
               }

               if (index >= 0) { //之前已经保存过key，则替换value
                   index = index*2 + 1;
                   final V old = (V)mArray[index];
                   mArray[index] = value;
                   return old; //返回value
               }

               //检查数组长度

               //保存数据
               mHashes[index] = hash;
               mArray[index<<1] = key;
               mArray[(index<<1)+1] = value;
               mSize++;
               return null;
           }

}
他用两个数组来模拟Map，第一个数组存放存放item的hash值，第二数组是把key，value连续的存放在数组里，[key1,value1,key2,value2,key3,value3]
通过先算hash在第一个数组里找到它的hash index(通过二分法查找)，根据这个index在去第二个数组里找到这个key-value。hash和key必须同时相等，否则从index向前向后查找。
这个数据结构的设计就做到了，有多少个item我就分配多少内存，做到了memory的节约。

22.HashSet
HashSet: 元素无序的，且不能重复
public abstract class AbstractCollection<E> implements Collection<E>
public abstract class AbstractSet<E> extends AbstractCollection<E> implements Set<E>
public class HashSet<E> extends AbstractSet<E> implements Set<E>, Cloneable, Serializable {
 transient HashMap<E, HashSet<E>> backingMap; //key为v添加的值，value为当前对象，由于key不重复，则保证了HashSet中的元素不重复

  @Override
    public boolean add(E object) {
        return backingMap.put(object, this) == null;
    }
   @Override
    public boolean remove(Object object) {
        return backingMap.remove(object) != null; // map.remove(key)
    }
}
---LinkedHashSet
---TreeSet

23.HashTable
特点：
1、方法使用synchronized同步，是线程安全的，HashMap不是线程安全的。
在不考虑线程安全的情况下，使用HashMap效率更高
2、key和value都不能使用null，HashMap允许key或value=null
3、Hashtable继承Dictionary，实现了map接口，HashMap继承AbstractMap，AbstractMap实现了Map接口

public abstract class Dictionary<K, V>
public class Hashtable<K, V> extends Dictionary<K, V>implements Map<K, V>, Cloneable, Serializable {
 private transient HashtableEntry<K, V>[] table;
 public synchronized V put(K key, V value) {
        if (key == null) {
            throw new NullPointerException("key == null");
        } else if (value == null) {
            throw new NullPointerException("value == null");
        }
        int hash = Collections.secondaryHash(key);
        HashtableEntry<K, V>[] tab = table;
        int index = hash & (tab.length - 1);
        HashtableEntry<K, V> first = tab[index];
        for (HashtableEntry<K, V> e = first; e != null; e = e.next) {
            if (e.hash == hash && key.equals(e.key)) {
                V oldValue = e.value;
                e.value = value;
                return oldValue;
            }
        }

        // No entry for key is present; create one
        modCount++;
        if (size++ > threshold) {
            rehash();  // Does nothing!!
            tab = doubleCapacity();
            index = hash & (tab.length - 1);
            first = tab[index];
        }
        tab[index] = new HashtableEntry<K, V>(key, value, hash, first);
        return null;
    }

}

22.四种引用类型的介绍
1）强引用(Strong Reference)
JVM 宁可抛出 OOM ，也不会让 GC 回收具有强引用的对象。。强引用不使用时，可以通过 obj = null 来显式的设置该对象的所有引用为 null，这样就可以回收该对象了。至于什么时候回收，取决于 GC 的算法
2）软引用(Soft Reference)
SoftReference<String> softReference = new SoftReference<>(str);
如果一个对象只具有软引用，那么在内存空间足够时，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。
3）弱引用(Weak Reference)
WeakReference<String> weakReference = new WeakReference<>(str);
与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。因为在 GC 时，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象- -。
4）虚引用(PhantomReference)
与其他几种引用都不同，虚引用并不会决定对象的生命周期，也无法通过虚引用获得对象实例。


数据结构与算法
1. 堆和栈在内存中的区别是什么(数据结构方面以及实际实现方面)
2. 最快的排序算法是哪个?给阿里 2 万多名员工按年龄排序应该选择哪个算法?堆和树
  的区别;写出快排代码;链表逆序代码(阿里)
3. 求 1000 以内的水仙花数以及 40 亿以内的水仙花数(百度)
4. 子串包含问题(KMP 算法)写代码实现
5. 万亿级别的两个 URL 文件 A 和 B,如何求出 A 和 B 的差集 C,(Bit 映射->hash 分组->多文
件读写效率->磁盘寻址以及应用层面对寻址的优化)
6. 蚁群算法与蒙特卡洛算法
7. 写出你所知道的排序算法及时空复杂度,稳定性(小米)
其他
1. 死锁的四个必要条件？
public class ThreadDeadlock {

    public static void main(String[] args) throws InterruptedException {
        Object obj1 = new Object();
        Object obj2 = new Object();

       //让obj1和obj2两个锁对象在同步块中互相等待
        Thread t1 = new Thread(new SyncThread(obj1, obj2), "t1"); //线程1在等待obj2同步锁，而线程2正在使用obj2同步锁
        Thread t2 = new Thread(new SyncThread(obj2, obj3), "t2"); //线程2在等待obj1同步锁，而线程1正在使用obj1同步锁

        t1.start();
        Thread.sleep(5000);
        t2.start();
    }

}

class SyncThread implements Runnable{
    private Object lock1;
    private Object lock2;

    public SyncThread(Object o1, Object o2){
        this.lock1=o1;
        this.lock2=o2;
    }
    @Override
    public void run() {
        synchronized (lock1) {
             work();
             synchronized (lock2) { //互相等待
                work();
             }
        }
    }
    private void work() {
        try {
            Thread.sleep(30000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
2. 常见编码方式;utf-8 编码中的中文占几个字节;int 型几个字节？
一个汉字一般占3个字节
一个数字占1个字节
一个字母占1个字节
3. 实现一个 Json 解析器(可以通过正则提高速度)？



