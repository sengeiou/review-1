整个View树的绘图流程是在ViewRootImpl类的performTraversals()方法开始的
该函数做的执行过程主要是根据之前设置的状态，判断是否重新计算视图大小(measure)、是否重新放置视图的位置(layout)、以及是否重绘 (draw)

提示：
1、setContentView
创建DecorView，并添加我们的内容布局
通过Activity.setContentView()将创建一个DecorView(选择一个系统布局进行渲染)，并将我们的内容布局添加到DecorView中。
2、ViewRootImpl的创建
Activity.makeVisible--->WindowManagerImpl.addView()----WindowManagerGlobal.addView()创建ViewRootImpl
public class WindowManagerGlobal{
       // 创建ViewRootImpl，并将DecorView设置到ViewRootImpl中
       public void addView(View decorView, ViewGroup.LayoutParams params,Display display, Window parentWindow) {
             root = new ViewRootImpl(decorView.getContext(), display);
             view.setLayoutParams(wparams);
             root.setView(decorView, wparams, panelParentView);
        }
 }

//负责管理我们的View树
public final class ViewRootImpl implements ViewParent{
    private View mView; //DecorView

    public void setView(View decor, WindowManager.LayoutParams attrs){
       this.mView=decor;
    }
    private void performTraversals() {
            ......
            //最外层的根视图的widthMeasureSpec和heightMeasureSpec由来
            //lp.width和lp.height在创建ViewGroup实例时等于MATCH_PARENT
            int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);
            int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);
            ......
              performMeasure(childWidthMeasureSpec，childHeightMeasureSpec)
            ......
              performLayout(lp, mWidth, mHeight);
            ......
              performDraw(canvas);
            ......
     }
     //调用DecorView.measure
    private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {
         mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);
    }
    //调用DecorView.layout
    private void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,
            int desiredWindowHeight) {
         mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());
    }
    //调用DecorView.draw
    private void performDraw(){
         mView.draw(canvas);
    }

     //创建root view的MeasureSpec
    private static int getRootMeasureSpec(int windowSize, int rootDimension) {
        int measureSpec;
        switch (rootDimension) {
        case ViewGroup.LayoutParams.MATCH_PARENT:
            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);
            break;
        case ViewGroup.LayoutParams.WRAP_CONTENT:
            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);
            break;
        default:
            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);
            break;
        }
        return measureSpec;
    }
}
一、measure过程
顶级View的performMeasure-> measure() -> onMeasure() -> child view的 measure() -> child view的onMeasure()
1、view的measure过程
    public final void measure(int widthMeasureSpec, int heightMeasureSpec) {
         ..............
         onMeasure(widthMeasureSpec, heightMeasureSpec);
         ..............
    }
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),
                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));
    }
2、ViewGroup的measure过程
    protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {
        final int size = mChildrenCount;
        final View[] children = mChildren;
        for (int i = 0; i < size; ++i) {
            final View child = children[i];
            if ((child.mViewFlags & VISIBILITY_MASK) != GONE) { //view不为gone
                measureChild(child, widthMeasureSpec, heightMeasureSpec);
            }
        }
    }
    //由父View的measureSpec和自身的LayoutParam 计算得到
    protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec) {
        final LayoutParams lp = child.getLayoutParams();

        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,
                mPaddingLeft + mPaddingRight, lp.width);
        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,
                mPaddingTop + mPaddingBottom, lp.height);

        child.measure(childWidthMeasureSpec, childHeightMeasureSpec); //child view的measure...onMeasure
    }

二、layout过程
顶级View的performLayout() ->layout() ->onLayout() ->child view的layout() ->child view的onLayout()
layout()确定View自身的位置
onLayout() 确定所有子元素的位置
ViewGroup.onLayout()是个抽象方法，实现类需要实现onLayout逻辑，比如LinearLayout

1、View的layout过程
public void layout(int l, int t, int r, int b) {
       onLayout(changed, l, t, r, b);
       //注意：l，t，r，b都是相对于父控件的坐标，而不是在屏幕上的坐标，对应getLeft、getTop、getRight、getBottom
       // getWidth()=right-left ;  getHeight()=bottom-top; 在onLayout之后得到，此时该值等于测量宽高
       // getMeasuredWidth()/getMeasuredHeight()可获得测量宽高，在onMeasure之后得到
}
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
          //空实现，如果是ViewGroup类型，则继续进行child view的layout
}
2、ViewGroup的onLayout过程
    @Override
    protected abstract void onLayout(boolean changed,int l, int t, int r, int b); //抽象方法

3、LinearLayout的onLayout
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
     int childCount=getChildCount();
     for(int i=0;i<childCount;i++){
        View child=getChildAt(i);
        child.layout(left, top, left + width, top + height); //调用子view进行layout，
     }
}
三、draw
1、View
    public void draw(Canvas canvas) {
        ......
        /*
         * Draw traversal performs several drawing steps which must be executed
         * in the appropriate order:
         *
         *      1. Draw the background
         *      2. If necessary, save the canvas' layers to prepare for fading
         *      3. Draw view's content
         *      4. Draw children
         *      5. If necessary, draw the fading edges and restore layers
         *      6. Draw decorations (scrollbars for instance)
         */

        // Step 1, draw the background, if needed
        ......
        if (!dirtyOpaque) {
            drawBackground(canvas);
        }

        // skip step 2 & 5 if possible (common case)
        ......

        // Step 2, save the canvas' layers
        ......
            if (drawTop) {
                canvas.saveLayer(left, top, right, top + length, null, flags);
            }
        ......

        // Step 3, 绘制自身
        if (!dirtyOpaque) onDraw(canvas);

        // Step 4, 绘制子View
        dispatchDraw(canvas);

        // Step 5, draw the fade effect and restore layers
        ......
        if (drawTop) {
            matrix.setScale(1, fadeHeight * topFadeStrength);
            matrix.postTranslate(left, top);
            fade.setLocalMatrix(matrix);
            p.setShader(fade);
            canvas.drawRect(left, top, right, top + length, p);
        }
        ......

        // Step 6, draw decorations (scrollbars)
        onDrawScrollBars(canvas);
        ......
    }
    //绘制子View
    protected void dispatchDraw(Canvas canvas) {

    }

    //绘制自身
    public void onDraw(Canvas canvas){

    }
 2、ViewGroup
    @Override
    protected void dispatchDraw(Canvas canvas) {
        for (int i = 0; i < childrenCount; i++) {
          drawChild(canvas, transientChild, drawingTime)
        }
    }
    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         return child.draw(canvas, this, drawingTime);
     }