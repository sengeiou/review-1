Handler: 消息的表示
Looper:  消息队列
MessageQueue:用于循环取出消息进行处理
Message: 发送消息和处理消息

具体处理流程如下：
public class Handler{
	final MessageQueue mQueue; //当handler发送消息时，将消息放入MessageQueue队列中
	final Looper mLooper; //用于循环处理Message
	final Callback mCallback; //回调函数
	public Handler(Looper looper) {
			this(looper, null, false);
		}
	public Handler(Looper looper, Callback callback, boolean async) {
			mLooper = looper;
			mQueue = looper.mQueue;
			mCallback = callback;
			mAsynchronous = async;
		}
	//Looper循环处理MessageQueue中的Message，然后调用
	public void dispatchMessage(Message msg) {
			if (msg.callback != null) {//通过post(Runnable)发送的消息
				handleCallback(msg);
			} else {
				if (mCallback != null) { //首先判断回调函数
					if (mCallback.handleMessage(msg)) {
						return;
					}
				}
				handleMessage(msg);
			}
		}
	public void handleMessage(Message msg) {
	   //由子类实现
	}

	// postXXX
	public final boolean post(Runnable r)
    {
	    Message m = Message.obtain();
        m.callback = r; //将runnable赋值给msg.callback
       return  sendMessageDelayed(m, 0);
    }
	//sendXX
	public final boolean sendEmptyMessage(int what)
    {
	    Message msg = Message.obtain();
        msg.what = what;
        return sendMessageDelayed(msg, delayMillis);
    }
	//封装好Message后，通过MessageQueue压入队列中
	private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {
        msg.target = this;
        if (mAsynchronous) {
            msg.setAsynchronous(true);
        }
        return queue.enqueueMessage(msg, uptimeMillis);
    }

}

public class Looper{
    static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();//线程范围内共享
	final MessageQueue mQueue;

	private Looper(boolean quitAllowed) {
        mQueue = new MessageQueue(quitAllowed);//创建一个Looper会创建一个MessageQueue
        mThread = Thread.currentThread();
    }

	public static void prepare() {//创建一个Looper
			prepare(true);
		}

	private static void prepare(boolean quitAllowed) {
		if (sThreadLocal.get() != null) {
			throw new RuntimeException("Only one Looper may be created per thread");
		}
		sThreadLocal.set(new Looper(quitAllowed));
	}
	public static Looper myLooper() {
		return sThreadLocal.get(); //拿到当前线程中创建的Looper
	}

public static void loop() {
	//获取当前线程中的Looper
	final Looper me = myLooper();
	if (me == null) {
		throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
	}
	final MessageQueue queue = me.mQueue; //一个Looper中会有一个MessageQueue
	 for (;;) {
            Message msg = queue.next(); // might block
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }

			 msg.target.dispatchMessage(msg); //调用msg中保存的handler.dispatchMessage(msg)
		}
}

}



