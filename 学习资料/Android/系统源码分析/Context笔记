Context : 抽象类
   ---ContextImpl :Context的具体实现，Activity等组件内部都持有一个ContextImpl，用来负责具体实现
   ---ContextWrapper ：具体实现由mBase完成，mBase变量为CotextImpl实例
         ---Application
		 ---ContextThemeWrapper
		        -----Activity

		 ---Service

------------------------------Activity与Context绑定流程--------------------------------
//1、Instrumentation创建Activity
Activity activity = mInstrumentation.newActivity(cl, component.getClassName(), r.intent);
//2、创建ContextImpl：负责Context的具体实现
ContextImpl appContext = ContextImpl.createActivityContext(
		this, r.packageInfo, r.token, displayId, r.overrideConfig);
appContext.setOuterContext(activity);//将Activity与该ContextImpl绑定
//3、将Context等信息注入到Activity中。mBase=ContextImpl
activity.attach(appContext, this, getInstrumentation(), r.token,
		r.ident, app, r.intent, r.activityInfo, title, r.parent,
		r.embeddedID, r.lastNonConfigurationInstances, config,
		r.referrer, r.voiceInteractor, window);

public class Activity extends ContextThemeWrapper{
    //将创建的ContextImpl实例赋值给Activity，之后调用相关功能都转交给ContextImpl执行
	final void attach(Context context, ActivityThread aThread,
			Instrumentation instr, IBinder token, int ident,
			Application application, Intent intent, ActivityInfo info,
			CharSequence title, Activity parent, String id,
			NonConfigurationInstances lastNonConfigurationInstances,
			Configuration config, String referrer, IVoiceInteractor voiceInteractor,
			Window window) {
		attachBaseContext(context);
		mWindow = new PhoneWindow(this, window);

	}
    @Override
    protected void attachBaseContext(Context base) {
        mBase = base;
    }

    @Override
    public void startActivity(Intent intent) {
        mBase.startActivity(intent);
    }

    protected void onCreate(@Nullable Bundle savedInstanceState) {
        .............................
		//通知Application，有Activity创建了
        getApplication().dispatchActivityCreated(this, savedInstanceState);
    }
    protected void onResume() {
        ......................

        getApplication().dispatchActivityResumed(this);
    }
    protected void onDestroy() {
        .......................
        getApplication().dispatchActivityDestroyed(this);
    }
}

--------------------Application
主要负责管理ActivityLifecycleCallbacks、ComponentCallbacks
Activity在生命周期方法中会调用Application进行响应周期函数更新
比如在Activity的onCreate中调用Application.dispatchActivityCreated()，通知所有的ActivityLifecycleCallbacks监听器，有Activity创建了。

public class Application extends ContextWrapper implements ComponentCallbacks2 {
    private ArrayList<ComponentCallbacks> mComponentCallbacks =
            new ArrayList<ComponentCallbacks>();
    private ArrayList<ActivityLifecycleCallbacks> mActivityLifecycleCallbacks =
            new ArrayList<ActivityLifecycleCallbacks>();
    private ArrayList<OnProvideAssistDataListener> mAssistCallbacks = null;

    //Activity生命周期回调
    public interface ActivityLifecycleCallbacks {
        void onActivityCreated(Activity activity, Bundle savedInstanceState);
        void onActivityStarted(Activity activity);
        void onActivityResumed(Activity activity);
        void onActivityPaused(Activity activity);
        void onActivityStopped(Activity activity);
        void onActivitySaveInstanceState(Activity activity, Bundle outState);
        void onActivityDestroyed(Activity activity);
    }
	//注册监听器
    public void registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback) {
        synchronized (mActivityLifecycleCallbacks) {
            mActivityLifecycleCallbacks.add(callback);
        }
    }
    //注销监听器
    public void unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback) {
        synchronized (mActivityLifecycleCallbacks) {
            mActivityLifecycleCallbacks.remove(callback);
        }
    }
   //通知监听器，有Activity创建了
   void dispatchActivityCreated(Activity activity, Bundle savedInstanceState) {
        Object[] callbacks = collectActivityLifecycleCallbacks();
        if (callbacks != null) {
            for (int i=0; i<callbacks.length; i++) {
			     //通知所有监听器，有Activity创建了
                ((ActivityLifecycleCallbacks)callbacks[i]).onActivityCreated(activity,
                        savedInstanceState);
            }
        }
    }

    void dispatchActivityStarted(Activity activity) {
        Object[] callbacks = collectActivityLifecycleCallbacks();
        if (callbacks != null) {
            for (int i=0; i<callbacks.length; i++) {
                ((ActivityLifecycleCallbacks)callbacks[i]).onActivityStarted(activity);
            }
        }
    }

    void dispatchActivityResumed(Activity activity) {
        Object[] callbacks = collectActivityLifecycleCallbacks();
        if (callbacks != null) {
            for (int i=0; i<callbacks.length; i++) {
                ((ActivityLifecycleCallbacks)callbacks[i]).onActivityResumed(activity);
            }
        }
    }

    void dispatchActivityPaused(Activity activity) {
        Object[] callbacks = collectActivityLifecycleCallbacks();
        if (callbacks != null) {
            for (int i=0; i<callbacks.length; i++) {
                ((ActivityLifecycleCallbacks)callbacks[i]).onActivityPaused(activity);
            }
        }
    }

    void dispatchActivityStopped(Activity activity) {
        Object[] callbacks = collectActivityLifecycleCallbacks();
        if (callbacks != null) {
            for (int i=0; i<callbacks.length; i++) {
                ((ActivityLifecycleCallbacks)callbacks[i]).onActivityStopped(activity);
            }
        }
    }

    void dispatchActivityDestroyed(Activity activity) {
        Object[] callbacks = collectActivityLifecycleCallbacks();
        if (callbacks != null) {
            for (int i=0; i<callbacks.length; i++) {
                ((ActivityLifecycleCallbacks)callbacks[i]).onActivityDestroyed(activity);
            }
        }
    }
}





























