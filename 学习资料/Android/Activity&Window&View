
-----------------------------Activity、Window、View 三者的差别
Activity像一个工匠（控制单元），Window像窗户（承载模型），View像窗花（显示视图） LayoutInflater像剪刀，Xml配置像窗花图纸。

Activity是Android应用程序的载体，允许用户在其上创建一个用户界面，并提供用户处理事件的API，如onKeyEvent, onTouchEvent等.它仅仅是一个界面的载体，本身并不负责任何绘制。
Activity的内部实现，实际上是聚了一个Window对象，
当我们调用Acitivity的 setContentView方法的时候实际上是调用的Window对象的setContentView方法，所以我们可以看出Activity中关于界面的绘制实际上全是交给Window对象来做的。

总结如下：
Activity在onCreate之前调用attach方法，在attach方法中会创建window对象(PhoneWindow)。
window对象创建时并没有创建Decor对象对象。用户在Activity中调用setContentView,然后调用window的setContentView，
这时会检查DecorView是否存在，如果不存在则创建DecorView对象，然后把用户自己的View 添加到DecorView中。


-----------------View层级关系
FrameLayout
  --view(android:id/decor_content_parent)
        --FrameLayout(android:id/action_bar_container)
		--FrameLayout(android:id/content)
		     --ContentView内容布局

Activity被创建后，系统会调用它的attach方法来将Activity添加到ActivityThread当中
final void attach(Context context, ActivityThread aThread...)(
        attachBaseContext(context);
        //创建一个PhoneWindow
        mWindow = new PhoneWindow(this, window);
        mWindow.setCallback(this);

}
PhoneWindow聚合了DocerView,当用户调用setContentView的时候会把一颗View树仍给DocerView.
DecorView是PhoneWindow的一个内部类。实现很简单，它默认会包含一个灰色的标题栏，然后在标题栏下边会包含一个空白区域用来当用户调用setContentView的时候放置用户View，并传递事件
我们在Activity中调用setContentView其实是调用PhoneWindow.setContentView，下面看下PhoneWindow的setContentView：

public class PhoneWindow extends Window{
    private DecorView mDecor;
    private ViewGroup mContentParent; //对应R.id.content的FrameLayout容器，用来添加我们的内容布局

    @Override
    public final View getDecorView() {
        reutrn mDecor;
    }

    @Override
    public void setContentView(View view, ViewGroup.LayoutParams params) {

        if (mContentParent == null) {
           mDecor= new DecorView(context, featureId, this, getAttributes());
           //根据不同的feature选择布局layout
           int layoutResource = R.layout.screen_simple;
           mDecor.onResourcesLoaded(mLayoutInflater, layoutResource); //将layout渲染出来，添加到DecorView中
           /*
           * final View root = inflater.inflate(layoutResource, null);
           * addView(root, 0, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
           * mContentRoot = (ViewGroup) root;
           */
           mContentParent = (ViewGroup)mDecor.findViewById(com.android.internal.R.id.content);
           mDecor.setWindowBackground(background);//设置背景 mDecor.setBackgroundDrawable(drawable);

           final DecorContentParent decorContentParent = (DecorContentParent)mDecor.findViewById(R.id.decor_content_parent);
           if (decorContentParent != null) {
                mDecorContentParent = decorContentParent;
            }else{
               mTitleView = (TextView) findViewById(R.id.title); //标题
            }

        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {
            mContentParent.removeAllViews();
        }

        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {
            view.setLayoutParams(params);
            final Scene newScene = new Scene(mContentParent, view);
            transitionTo(newScene);
        } else {
            mContentParent.addView(view, params); //将我们的内容布局添加到R.id.content中
        }
    }














